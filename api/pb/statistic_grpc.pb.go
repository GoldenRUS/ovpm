// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: statistic.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StatisticService_List_FullMethodName              = "/pb.StatisticService/List"
	StatisticService_WFilterList_FullMethodName       = "/pb.StatisticService/WFilterList"
	StatisticService_GetSystemStatus_FullMethodName   = "/pb.StatisticService/GetSystemStatus"
	StatisticService_GetInterfaces_FullMethodName     = "/pb.StatisticService/GetInterfaces"
	StatisticService_GetInterfaceStats_FullMethodName = "/pb.StatisticService/GetInterfaceStats"
)

// StatisticServiceClient is the client API for StatisticService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatisticServiceClient interface {
	List(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*StatisticResponse, error)
	WFilterList(ctx context.Context, in *StatisticWithFilterRequest, opts ...grpc.CallOption) (*StatisticResponse, error)
	GetSystemStatus(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*SystemStatus, error)
	GetInterfaces(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*NetworkInterfacesResponse, error)
	GetInterfaceStats(ctx context.Context, in *InterfaceStatsRequest, opts ...grpc.CallOption) (*InterfaceStatsResponse, error)
}

type statisticServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStatisticServiceClient(cc grpc.ClientConnInterface) StatisticServiceClient {
	return &statisticServiceClient{cc}
}

func (c *statisticServiceClient) List(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*StatisticResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatisticResponse)
	err := c.cc.Invoke(ctx, StatisticService_List_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticServiceClient) WFilterList(ctx context.Context, in *StatisticWithFilterRequest, opts ...grpc.CallOption) (*StatisticResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatisticResponse)
	err := c.cc.Invoke(ctx, StatisticService_WFilterList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticServiceClient) GetSystemStatus(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*SystemStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemStatus)
	err := c.cc.Invoke(ctx, StatisticService_GetSystemStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticServiceClient) GetInterfaces(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*NetworkInterfacesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NetworkInterfacesResponse)
	err := c.cc.Invoke(ctx, StatisticService_GetInterfaces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticServiceClient) GetInterfaceStats(ctx context.Context, in *InterfaceStatsRequest, opts ...grpc.CallOption) (*InterfaceStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InterfaceStatsResponse)
	err := c.cc.Invoke(ctx, StatisticService_GetInterfaceStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatisticServiceServer is the server API for StatisticService service.
// All implementations must embed UnimplementedStatisticServiceServer
// for forward compatibility.
type StatisticServiceServer interface {
	List(context.Context, *EmptyRequest) (*StatisticResponse, error)
	WFilterList(context.Context, *StatisticWithFilterRequest) (*StatisticResponse, error)
	GetSystemStatus(context.Context, *EmptyRequest) (*SystemStatus, error)
	GetInterfaces(context.Context, *EmptyRequest) (*NetworkInterfacesResponse, error)
	GetInterfaceStats(context.Context, *InterfaceStatsRequest) (*InterfaceStatsResponse, error)
	mustEmbedUnimplementedStatisticServiceServer()
}

// UnimplementedStatisticServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStatisticServiceServer struct{}

func (UnimplementedStatisticServiceServer) List(context.Context, *EmptyRequest) (*StatisticResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedStatisticServiceServer) WFilterList(context.Context, *StatisticWithFilterRequest) (*StatisticResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WFilterList not implemented")
}
func (UnimplementedStatisticServiceServer) GetSystemStatus(context.Context, *EmptyRequest) (*SystemStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemStatus not implemented")
}
func (UnimplementedStatisticServiceServer) GetInterfaces(context.Context, *EmptyRequest) (*NetworkInterfacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInterfaces not implemented")
}
func (UnimplementedStatisticServiceServer) GetInterfaceStats(context.Context, *InterfaceStatsRequest) (*InterfaceStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInterfaceStats not implemented")
}
func (UnimplementedStatisticServiceServer) mustEmbedUnimplementedStatisticServiceServer() {}
func (UnimplementedStatisticServiceServer) testEmbeddedByValue()                          {}

// UnsafeStatisticServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatisticServiceServer will
// result in compilation errors.
type UnsafeStatisticServiceServer interface {
	mustEmbedUnimplementedStatisticServiceServer()
}

func RegisterStatisticServiceServer(s grpc.ServiceRegistrar, srv StatisticServiceServer) {
	// If the following call pancis, it indicates UnimplementedStatisticServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StatisticService_ServiceDesc, srv)
}

func _StatisticService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatisticService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticServiceServer).List(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticService_WFilterList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatisticWithFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticServiceServer).WFilterList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatisticService_WFilterList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticServiceServer).WFilterList(ctx, req.(*StatisticWithFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticService_GetSystemStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticServiceServer).GetSystemStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatisticService_GetSystemStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticServiceServer).GetSystemStatus(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticService_GetInterfaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticServiceServer).GetInterfaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatisticService_GetInterfaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticServiceServer).GetInterfaces(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticService_GetInterfaceStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InterfaceStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticServiceServer).GetInterfaceStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatisticService_GetInterfaceStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticServiceServer).GetInterfaceStats(ctx, req.(*InterfaceStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StatisticService_ServiceDesc is the grpc.ServiceDesc for StatisticService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatisticService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.StatisticService",
	HandlerType: (*StatisticServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _StatisticService_List_Handler,
		},
		{
			MethodName: "WFilterList",
			Handler:    _StatisticService_WFilterList_Handler,
		},
		{
			MethodName: "GetSystemStatus",
			Handler:    _StatisticService_GetSystemStatus_Handler,
		},
		{
			MethodName: "GetInterfaces",
			Handler:    _StatisticService_GetInterfaces_Handler,
		},
		{
			MethodName: "GetInterfaceStats",
			Handler:    _StatisticService_GetInterfaceStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "statistic.proto",
}
